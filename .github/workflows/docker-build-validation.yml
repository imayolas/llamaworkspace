# This workflow is made to validate that Dockerfile builds and runs correctly. A single Dockerfile is useful for Dockerfile-based deployments like AWS ECS or Fargate

name: Validate Dockerfile Build & Run

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_DB: llamaws
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: docker build --no-cache -t my-app:latest .

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Verify Docker image build
        run: docker run --rm --env-file .env -e DATABASE_URL=postgres://postgres:password@postgres:5432/llamaws my-app:latest

      - name: Wait for the application to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3000/api/status | grep -q "ok"; then
              echo "Application is ready"
              exit 0
            fi
            echo "Waiting for the application to be ready..."
            sleep 5
          done
          echo "Application did not become ready in time"
          exit 1

      - name: Check application status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/status)
          body=$(curl -s http://localhost:3000/api/status)
          if [ "$response" -eq 200 ] && [ "$body" == "ok" ]; then
            echo "Application status is OK"
          else
            echo "Application status check failed"
            exit 1
          fi

      - name: Clean up
        run: docker stop my-app-container && docker rm my-app-container
